name: Release
 
on:
  push:
    branches:
      - 'release/**'
      
  workflow_dispatch:
    inputs:
      bump:
        description: bump rule (major|minor|patch|premajor|preminor|prepatch|prerelease)
        default: prerelease
        required: false
        
      version:
        description: manual version
        default: ''
        required: false
        
      sdk_version:
        description: manual sdk version
        default: ''
        required: false
        
      release:
        description: release type (local|global)
        default: local
        required: false
        
# Secrets:
#   pypi_token - pypi API token
      
jobs:
  Release:
    runs-on: ubuntu-latest
    env:
      BUMP: ${{ github.event.inputs.bump }} # default values for push-triggered run
      RELEASE: local
      IMAGES: ''
      VERSION: ${{ github.event.inputs.version }}
      SDK_VERSION: ${{ github.event.inputs.sdk_version }}
    steps:
      - name: Validate inputs  #TODO create an action for this
        if: github.event_name == 'workflow_dispatch'
        run: |
          case ${{ github.event.inputs.bump }} in
            major)
              ;;
            premajor)
              ;;
            minor)
              ;;
            preminor)
              ;;
            patch)
              ;;
            prepatch)
              ;;
            prerelease)
              ;;
            *)
              echo "invalid bump rule: ${{ github.event.inputs.bump }}"
              exit 1
              ;;
          esac
          
          case ${{ github.event.inputs.release }} in 
            local)
              ;;
            global)
              ;;
            *)
              echo invalid release type: ${{ github.event.inputs.release }}
              exit 1
              ;;
          esac
          
          echo BUMP=${{ github.event.inputs.bump }} >> $GITHUB_ENV
          echo RELEASE=${{ github.event.inputs.release }} >> $GITHUB_ENV
          echo VERSION=${{ github.event.inputs.version }} >> $GITHUB_ENV
          echo SDK_VERSION=${{ github.event.inputs.sdk_version }} >> $GITHUB_ENV
              
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.7
          
      - name: Setup poetry
        uses: abatilo/actions-poetry@v2.1.0

      # Bump version  
      # - name: Bump sdk
      #   if: github.event.inputs.sdk_version == '' && env.RELEASE == 'local'
      #   run: |
      #     SDK_VERSION=$(curl -Ls https://pypi.org/pypi/hydrosdk/json | jq -r '.releases | keys[]' | sort -V | tail -n 1)
      #     echo $SDK_VERSION
      #     poetry add hydrosdk=$SDK_VERSION
          
      - name: Bump sdk to latest stable version
        if: env.SDK_VERSION == '' && env.RELEASE == 'global'
        run: |
          SDK_VERSION=$(curl -Ls https://pypi.org/pypi/hydrosdk/json | jq -r .info.version)
          echo $SDK_VERSION
          poetry add hydrosdk=$SDK_VERSION
          
      - name: Set manual sdk version
        if: env.SDK_VERSION != ''
        run: poetry add hydrosdk=${{ env.SDK_VERSION }}

      - name: bump version
        if: env.VERSION == ''
        run: poetry version ${{ env.BUMP }}
        
      - name: force bump version
        if: env.VERSION != ''
        run: poetry version ${{ env.VERSION }}

      - name: Add version env
        run: echo VERSION=$(poetry version -s) >> $GITHUB_ENV
      
      - name: Save new version 
        run: echo ${{ env.VERSION }} > version

      - name: Build with version
        run: make python-all -e VERSION=${{ env.VERSION }}

      # Push images        
      - name: Docker Login
        uses: docker/login-action@v1.9.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get list images 
        id: get-images
        run: |
          echo IMAGES=$(docker images | grep serving-runtime | awk '{print $1":"$2}') >> $GITHUB_ENV
          echo "::set-output name=images-output::${{ env.IMAGES }}"

      - name: Push image
        run: |
          echo ${{ env.IMAGES }}
          for i in ${{ env.IMAGES }}
          do
            docker push $i
          done  

        # Commit changes
      - name: Commit new version
        if: github.event_name == 'workflow_dispatch'
        run: "echo ${{ env.VERSION }} > version"

      - name: Tag and push changes
        id: tag
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -a --allow-empty -m "release version ${{ env.VERSION }}"
          git push

      - name: Reports
        id: generate-output
        run: echo "::set-output name=tag-output::${{ env.VERSION }}"

      - name: Create github release
        if: github.event_name == 'workflow_dispatch'
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.VERSION }}

    outputs:
      tag: ${{ steps.generate-output.outputs.tag-output }}
      images: ${{ steps.get-images.outputs.images-output }}
          
  slackNotification:
    name: Slack Notification
    needs: Release
    runs-on: ubuntu-latest
    steps:
    - name: Slack Notification success
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: hydrosphere
        SLACK_USERNAME: HydroRobot
        SLACK_ICON: https://avatars.githubusercontent.com/u/17550625?s=200&v=4
        SLACK_COLOR: ${{ job.status }}
        SLACK_TITLE: Build status - success
        SLACK_MESSAGE: "Releasing ${{ needs.Release.outputs.images }} with ${{ needs.Release.outputs.tag }} tag :rocket:"
        MSG_MINIMAL: true

    - name: Slack Notification failure
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: hydrosphere
        SLACK_USERNAME: HydroRobot
        SLACK_ICON: https://avatars.githubusercontent.com/u/17550625?s=200&v=4
        SLACK_COLOR: ${{ job.status }}
        SLACK_TITLE: Build status - failure
        SLACK_MESSAGE: "Check build $GITHUB_RUN_ID status"
        MSG_MINIMAL: true